'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint no-useless-constructor:0 */
/* eslint no-unused-vars:0 */
var FlowNode = require('../flownode');

/**
 * A convenience node to echo parameters for mapping to the context.
 *
 * All parameters are sent back in the block response. This block never fails.
 *
 * Example node:
 *
 *        "step.1": {
 *           "type": "parametermap",
 *           "config": {},
 *           "parameters": [{
 *              "name": "foo",
 *              "value": "$.data.foo|0"
 *           }, {
 *              "name": "bar",
 *              "default": "bar"
 *           }],
 *           "response": {
 *               "context": {
 *                  "$.foo|0": "foo",
 *                  "$.bar|0": "bar"
 *               },
 *               "routes": [
 *                   "next": "step.2"
 *               ]
 *           }
 *       }
 */

var ParameterMap = function (_FlowNode) {
  _inherits(ParameterMap, _FlowNode);

  function ParameterMap(name, node, flow) {
    _classCallCheck(this, ParameterMap);

    return _possibleConstructorReturn(this, (ParameterMap.__proto__ || Object.getPrototypeOf(ParameterMap)).call(this, name, node, flow));
  }

  _createClass(ParameterMap, [{
    key: 'action',
    value: function action(env, params, cb) {
      cb(null, params);
    }
  }]);

  return ParameterMap;
}(FlowNode);

exports = module.exports = ParameterMap;