'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint no-console:0 */
var FlowNode = require('../flownode');

/**
 * Causes the flow to wait for a certain amount of time before continuing to the next node.
 * Configuration:
 *  delay: The length of time the node should wait (ms)
 */

var DelayBlock = function (_FlowNode) {
	_inherits(DelayBlock, _FlowNode);

	function DelayBlock(name, node, flow) {
		_classCallCheck(this, DelayBlock);

		var _this = _possibleConstructorReturn(this, (DelayBlock.__proto__ || Object.getPrototypeOf(DelayBlock)).call(this, name, node, flow));

		_this.delay = _this.config.delay;
		return _this;
	}

	_createClass(DelayBlock, [{
		key: 'validate',
		value: function validate() {
			if (!this.config.delay) {
				return {
					delay: 'undefined'
				};
			} else if (this.config.delay < 0) {
				return {
					delay: 'invalid'
				};
			}
			return null;
		}
	}, {
		key: 'action',
		value: function action(env, params, cb) {
			setTimeout(function () {
				return cb();
			}, this.delay);
		}
	}]);

	return DelayBlock;
}(FlowNode);

exports = module.exports = DelayBlock;