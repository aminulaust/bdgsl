'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint no-useless-constructor:0 */
/* eslint no-unused-vars:0 */
var FlowNode = require('../flownode');

var Code = function (_FlowNode) {
	_inherits(Code, _FlowNode);

	function Code(name, node, flow) {
		_classCallCheck(this, Code);

		return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).call(this, name, node, flow));
	}

	_createClass(Code, [{
		key: 'getCodeBlock',
		value: function getCodeBlock() {
			var parts = this.config.method.split('|');
			var namespace = parts[0];
			var codeblock = parts[1];
			var codeblocks = this.flow.env && this.flow.env('$.codeblocks');
			return codeblocks && codeblocks[codeblock] && codeblocks[codeblock].action;
		}
	}, {
		key: 'validate',
		value: function validate() {
			// TODO: Change this when format changes
			if (!this.config.method) {
				return {
					method: 'undefined'
				};
			} else if (this.config.method.indexOf('|') < 0) {
				return {
					method: 'invalid'
				};
			} else if (this.config.method.split('|').length !== 2) {
				return {
					method: 'invalid'
				};
			} else if (!this.getCodeBlock()) {
				return {
					method: 'missing'
				};
			} else if (typeof this.getCodeBlock() !== 'function') {
				return {
					method: 'not a module'
				};
			}

			return null;
		}
	}, {
		key: 'action',
		value: function action(env, params, cb) {
			var codeblock = this.getCodeBlock();
			codeblock(env, params, cb);
		}
	}]);

	return Code;
}(FlowNode);

exports = module.exports = Code;