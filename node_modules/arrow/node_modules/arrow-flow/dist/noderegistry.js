'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint global-require:0 */

/**
 * A registry of the flow node handlers by type.
 * @public
 * @class
 */
var NodeRegistry = function () {

	/**
 * Create the node registry.
 * @constructor
 */
	function NodeRegistry() {
		_classCallCheck(this, NodeRegistry);

		this.init();
	}

	/**
 * Initialize the node handler cache.
 */


	_createClass(NodeRegistry, [{
		key: 'init',
		value: function init() {
			this.nodeHandlers = {};
			this._registerDefaultNodes();
		}

		/**
  * Allow dynamic extension of the supported node types.
  * @public
  * @param {string} type - The type of the handler.
  * @param {FlowNode} handler - A FlowNode type that has the business logic for this node type.
  */

	}, {
		key: 'registerNode',
		value: function registerNode(type, handler) {
			this.nodeHandlers[type] = handler;
		}

		/**
  * Register the default node handlers.
  * @private
  */

	}, {
		key: '_registerDefaultNodes',
		value: function _registerDefaultNodes() {
			this.registerNode('code', require('./nodehandlers/code'));
			this.registerNode('delay', require('./nodehandlers/delayblock'));
			this.registerNode('noop', require('./nodehandlers/noop'));
			this.registerNode('switch', require('./nodehandlers/switch'));
			this.registerNode('parametermap', require('./nodehandlers/parametermap'));
		}

		/**
  * Create an instance of the node type handler.
  * @public
  * @param {string} name - The name of the node.
  * @param {object} node - The definition for the node.
  * @param {Flow} flow - The flow parenting the node.
  */

	}, {
		key: 'create',
		value: function create(name, node, flow) {
			if (!this.nodeHandlers[node.type]) {
				throw new Error('Cannot create \'' + name + '\' in \'' + flow.id + '\' flow. No flow handler registered to handle type \'' + node.type + '\'.');
			}
			return new this.nodeHandlers[node.type](name, node, flow);
		}
	}]);

	return NodeRegistry;
}();

exports = module.exports = new NodeRegistry();