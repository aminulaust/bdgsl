/* eslint-disable */

var fs = require('fs'),
		path = require('path');
		AppC = require('appc-platform-sdk');
		uiConf = require('./config');

function makeIndexPage(filename) {
	return fs.readFileSync(filename).toString()
		.replace(/{{APPC_PLATFORM_SERVER}}/g, AppC.baseurl)
		.replace(/{{APPC_SECURITY_SERVER}}/g, AppC.securityurl)
		.replace(/{{PREFIX}}/g, $conf.prefix)
		.replace(/{{CONFIG}}/g, 'window.$conf = ' + JSON.stringify($conf));
}

function Admin(express, arrow, app, objectmodel, config, authCallback, callback) {
	var indexFile;
	var isDev = false;

	// ADMIN_DIST = "run using dist folder for source rather than building with webpack at runtime."
	if (!process.env.ADMIN_DIST) {
		try {
			fs.statSync(path.join(__dirname, 'src'));
			isDev = app.get('env') === 'development';
		} catch (err) {
			isDev = false;
		}
	}

	global.$conf = {};
	// non-ES6 clone uiConf to global.$conf
	for (var key in uiConf) {
		if (uiConf.hasOwnProperty(key)) {
			global.$conf[key] = uiConf[key];
		}
	}

	$conf.prefix = config.createprefix || $conf.prefix;
	$conf.apiprefix = config.apiprefix || $conf.apiprefix;
	$conf.apiDocPrefix = config.apiDocPrefix || $conf.apiDocPrefix;
	$conf.devMode = isDev;

	if (isDev) {
		arrow.logger.info('Running API Builder Console in development mode.');
		var webpack = require('webpack'),
				webpackConfig = require('./webpack.config'),
				webpackDevMiddleware = require('webpack-dev-middleware'),
				webpackHotMiddleware = require('webpack-hot-middleware'),
				compiler = webpack(webpackConfig),
				packedHandler = webpackDevMiddleware(compiler, {
					log: arrow.logger,
					stats: {
						colors: true,
						// Only log errors and warnings. SAVE THE TERMINAL!
						hash: false,
						version: false,
						timings: false,
						assets : false,
						chunks : false,
						chunkModules : false
					},
					hot: true,
					publicPath: webpackConfig.output.publicPath
				});
		app.use(packedHandler);
		app.use(webpackHotMiddleware(compiler, {
			path: `${$conf.prefix}/__webpack_hmr`,
			heartbeat: 2 * 1000
		}));
		app.use($conf.prefix, express.static(path.join(__dirname, './src')));
		indexFile = path.join(__dirname, './src/index.tmpl.html');
	} else {
		app.use($conf.prefix, express.static(path.join(__dirname, './dist')));
		indexFile = path.join(__dirname, './dist/index.tmpl.html');
	}

	var indexHtml = makeIndexPage(indexFile);

	app.use((req, resp, next) => {
		// webpack understands that it generated /(prefix)/assets, and that
		// static files can exist in ./src under /(prefix)/*, but it does not
		// understand that /(prefix)/api might be a valid route in the UI.
		// if it starts with '/(prefix)' and has not yet hit a handler, then
		// treat it as static index file.
		if (req.path.startsWith($conf.prefix)) {
			resp.set('Content-Type', 'text/html');
			resp.send(indexHtml || '<html></html>');
			return;
		}
		next();
	});

	arrow.logger.info('started API Builder Console');

	callback(null);
}

exports = module.exports = Admin;
