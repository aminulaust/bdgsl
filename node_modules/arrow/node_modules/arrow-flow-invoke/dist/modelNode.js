'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ArrowNode = require('./arrowNode');

var ModelNode = function (_ArrowNode) {
	_inherits(ModelNode, _ArrowNode);

	function ModelNode(arrow, name, node, flow) {
		_classCallCheck(this, ModelNode);

		var _this = _possibleConstructorReturn(this, (ModelNode.__proto__ || Object.getPrototypeOf(ModelNode)).call(this, arrow, name, node, flow));

		_this.modelName = _this.config.model;
		_this.model = _this.arrow.getModel(_this.modelName, false);
		return _this;
	}

	_createClass(ModelNode, [{
		key: 'validate',
		value: function validate() {
			if (!this.model) {
				return {
					model: 'not_found',
					name: this.modelName
				};
			}

			var connector = this.model.connector;
			var name = connector && _typeof(this.model.connector) === 'object' ? this.model.connector.name : this.model.connector;
			if (!name || !this.arrow.getConnector(name)) {
				return {
					connector: 'not_found',
					connectorName: name,
					name: this.modelName
				};
			}
			return null;
		}
	}]);

	return ModelNode;
}(ArrowNode);

exports = module.exports = ModelNode;