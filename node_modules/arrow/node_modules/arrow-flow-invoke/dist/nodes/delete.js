'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModelNode = require('../modelNode');

var ModelDelete = function (_ModelNode) {
	_inherits(ModelDelete, _ModelNode);

	function ModelDelete() {
		_classCallCheck(this, ModelDelete);

		return _possibleConstructorReturn(this, (ModelDelete.__proto__ || Object.getPrototypeOf(ModelDelete)).apply(this, arguments));
	}

	_createClass(ModelDelete, [{
		key: 'action',
		value: function action(ctx, params, cb) {
			this.model.delete(params.id, function (err, result) {
				// Not great but ORM layer doesn't just return null when not found
				if (err && err.match && err.match(/^trying to remove, couldn't find record with primary key:/)) {
					cb();
				} else {
					cb(err, result);
				}
			});
		}
	}]);

	return ModelDelete;
}(ModelNode);

exports = module.exports = ModelDelete;