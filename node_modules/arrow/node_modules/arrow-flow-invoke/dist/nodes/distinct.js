'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModelNode = require('../modelNode');

var ModelDistinct = function (_ModelNode) {
	_inherits(ModelDistinct, _ModelNode);

	function ModelDistinct() {
		_classCallCheck(this, ModelDistinct);

		return _possibleConstructorReturn(this, (ModelDistinct.__proto__ || Object.getPrototypeOf(ModelDistinct)).apply(this, arguments));
	}

	_createClass(ModelDistinct, [{
		key: 'action',
		value: function action(ctx, params, cb) {
			if (!params.field) {
				cb(null, { error: 'field is required' });
				return;
			} else if (!this.model.fields.hasOwnProperty(params.field)) {
				cb(null, { error: params.field + ' not found on model ' + this.model.name });
				return;
			}

			var field = params.field;
			delete params.field;
			this.model.distinct(field, params, cb);
			return;
		}
	}]);

	return ModelDistinct;
}(ModelNode);

exports = module.exports = ModelDistinct;