'use strict';

var fs = require('fs'),
    logger = require('./logger'),
    spawn = require('child_process').spawn;

/**
 * Remove docker image from build machine after it's pushed to docker registry.
 * @param imageId
 * @param callback
 */
exports.removeDockerImage = function(imageId, callback) {
    logger.debug("Removing docker image " + imageId);
    var drmi = spawn('docker', ['rmi', imageId]);

    drmi.stdout.on('data', function (data) {
        logger.debug(data.toString());
    });

    drmi.stderr.on('data', function (data) {
        logger.error(data.toString());
    });

    drmi.on('exit', function (code) {
        if (code !== 0) {
            return callback('Failed to remove docker image.');
        }
 
        return callback();
    });
};


/**
 * Tag docker image of an app.
 * @param imageRepoNameLocal
 * @param imageRepoNameRemote
 * @param version
 * @param callback
 */
exports.tagDockerImage = function(imageRepoNameLocal, imageRepoNameRemote, version, callback) {
   
    logger.debug("Creating a tag that " + imageRepoNameRemote+":"+version + " refers to docker image " + imageRepoNameLocal);
    var dtag = spawn('docker', ['tag', imageRepoNameLocal, imageRepoNameRemote+":"+version]);

    dtag.stdout.on('data', function (data) {
        logger.debug(data.toString());
    });

    dtag.stderr.on('data', function (data) {
        logger.error(data.toString());
    });

    dtag.on('exit', function (code) {
        if (code !== 0) {
            return callback('Failed to tag docker image.');
        }
 
        return callback();
    });
};


exports.getImageRepoName = function(appname, orgid, dockerRegistryURL) {

    if (dockerRegistryURL.substr(-1) === '/') {
        dockerRegistryURL = dockerRegistryURL.substring(0, dockerRegistryURL.length-1);
    }

    return dockerRegistryURL + '/' + orgid + '/' + appname;
};


/**
 * Build docker image
 *
 * @param imageRepoName
 * @param dir
 * @param buildCallback
 * @returns {*}
 */
exports.buildDockerImage = function(imageRepoName, dir, buildCallback) {

    logger.debug("Building docker image ...");
    var dbuild = spawn('docker', ['build', '-t', imageRepoName, dir]);

    dbuild.stdout.on('data', function (data) {
        logger.debug(data.toString());
    });

    dbuild.stderr.on('data', function (data) {
        logger.error(data.toString());
    });

    dbuild.on('exit', function (code) {
        if (code !== 0) {
            return buildCallback('Failed to build docker image.');
        }
 
        return buildCallback();
    });
};    


/**
 * Login to docker registry and push the docker image to docker registry
 *
 * @param imageRepoName
 * @param dockerRegistryAuthConfig
 * @param dockerRegistryURL
 * @param pushCallback
 * @returns {*}
 */
exports.pushDockerImage = function(imageRepoName, dockerRegistryAuthConfig, dockerRegistryURL, pushCallback) {

    var dlogin = spawn('docker', ['login', '-u', dockerRegistryAuthConfig.username, '-p', dockerRegistryAuthConfig.password, dockerRegistryURL]);

    dlogin.stdout.on('data', function (data) {
        logger.debug(data.toString());
    });

    dlogin.stderr.on('data', function (data) {
        logger.error(data.toString());
    });

    dlogin.on('exit', function (code) {
        if (code !== 0) {
            return pushCallback('Failed to login to docker registry.');
        }
        // push image and display the output live
        logger.debug("Pushing image to docker registry ...");
        var dpush = spawn('docker', ['push', imageRepoName]);

        dpush.stdout.on('data', function (data) {
            logger.debug(data.toString());
        });

        dpush.stderr.on('data', function (data) {
            logger.error(data.toString());
        });

        dpush.on('exit', function (code) {
            if (code !== 0) {
                return pushCallback('Failed to push image to docker registry.');
            }
            return pushCallback();
        });
    });
};   

