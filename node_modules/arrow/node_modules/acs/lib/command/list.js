'use strict';

var util = require('../util.js'),
    logger = require('../logger.js'),
    fs = require('fs'),
    program = require('commander'),
    moment = require('moment'),
    path = require('path'),
    uuid = require('uuid'),
    request = require('request'),
    HandleResult = require('./handleResult'),
    _ = require('underscore')._;

exports.run = function(args, opts) {
    var p,
        url,
        globalConfig = util.getGlobalConfig(),
        defaultConfig = util.getDefaultConfig(),
        proxy = util.getProxy();

    if (proxy) {
        logger.debug('ACS CLI is using proxy: ' + proxy.server);
        proxy = proxy.url;
    }
    if (globalConfig.publishHost && !opts.isCallback) {
        console.log(String(('Admin Hostname: ' + globalConfig.publishHost).grey));
    }

    // the command line argument will be treated as app name
    var appname = null;
    if (args.length > 0) {
        appname = args[0];
    }

    var cookie = globalConfig.cookie ? String(globalConfig.cookie).split(';')[0] || ['connect-sid', ''].join('=') : '';

    p = '/list';

    if (appname) {
        p += '/' + appname;
    }

    var queryAdded = false;
    if (opts.mine) {
        p += '?owner=developer';
        queryAdded = true;
    }

    if (opts.org) {
        if (queryAdded) {
            p += '&orgid=';
        } else {
            p += '?orgid=';
        }
        p += opts.org;
    }

    url = (globalConfig.publishHost || defaultConfig.publishHost) + ':' + (globalConfig.publishPort || defaultConfig.publishPort) + p;

    var HR = new HandleResult();
    HR.reqParams = ['list', args, opts];
    HR.errorMessage = 'List failed';
    HR.succeed = function(response, result) {
        showList(result, opts);
    };

    request({
        uri: encodeURI(url),
        method: 'GET',
        proxy: proxy,
        headers: {
            'Cookie': cookie,
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    }, HR.handler);

};

function showList(result, opts) {
    var apps = result.apps;
    var quotas = result.quotas || [];
    if (apps.length === 0) {
        console.log('No app found.');
        return;
    }
    var lastOrgid = null;
    for (var i = 0; i < apps.length; i++) {
        console.log();
        var app = apps[i];
        var imageRepoName
        if (!app) {
            continue;
        }
        if (app.orgid !== lastOrgid) {
            lastOrgid = app.orgid;
            console.log('Organization: ' + app.orgName + ' (' + app.orgid + ')');
            console.log('============ ');
            quotas.forEach(function(quota) {
                if (quota.orgid === app.orgid) {
                    console.log(String('Points:'.cyan));
                    var totalPoints = quota.points.quota === -1 ? 'unlimited' : quota.points.quota;
                    console.log(' -- Quota: '.cyan + totalPoints);
                    console.log(' -- Used: '.cyan + quota.points.used);
                    console.log();
                }
            });
        }
        console.log('App name: '.cyan + app.name);
        if (app.type === 'image') {
            if (app.url && app.orgid) {
                var urlArray = app.url.split('.');
                urlArray.splice(0,1); // domain array
                var domain = urlArray.join('.');
                imageRepoName = 'registry.' + domain + '/' + app.orgid + '/' + app.name;
            }           
        }
        if (app.userName) {
            console.log(' -- Created by: '.cyan + app.userName);
        }
        if (app.url) {
            console.log(' -- URL: '.cyan + app.url);
        }
        if (app.cname) {
            console.log(' -- DOMAIN: '.cyan + app.cname);
        }
        if (app.created_at) {
            console.log(' -- Created at: '.cyan + new Date(app.created_at));
        }
        if (app.published_at) {
            console.log(' -- Published at: '.cyan + moment(app.published_at).format());
        }
        if (app.max_size) {
            console.log(' -- Maximum allowed number of servers: '.cyan + app.max_size);
        }
        if (app.min_size) {
            console.log(' -- Minimum number of servers: '.cyan + app.min_size);
        }
        if (app.cur_size) {
            console.log(' -- Number of desired servers: '.cyan + app.cur_size);
        }
        if (app.scaleUpEnabled !== undefined) {
            console.log(' -- Auto scale-up enabled: '.cyan + app.scaleUpEnabled);
        }
        if (app.maxQueuedRequestsPerServer && app.scaleUpEnabled) {
            console.log(' -- Maximum queued requests per server: '.cyan + app.maxQueuedRequestsPerServer);
        }
        if (app.scaleDownEnabled !== undefined) {
            console.log(' -- Auto scale-down enabled: '.cyan + app.scaleDownEnabled);
        }
        if (!app.activeDeployment && !app.pendingDeployment) {
            console.log(' -- Status: '.cyan + app.status);
        }
        if (app.unpublished_at) {
            console.log(' -- Unpublished at: '.cyan + new Date(app.unpublished_at));
        }
        if (app.deactivated_at) {
            console.log(' -- Deactivated at: '.cyan + new Date(app.deactivated_at));
        }
        console.log();

        if(app.activeDeployment) {
            console.log(' -- Active deployment: '.cyan);
            if (app.NodeVersion) {
                console.log('    - Node version: '.cyan + app.NodeVersion);
            }
            if (app.server_size) {
                console.log('    - Server size: '.cyan + app.server_size);
            }
            if (app.version) {
                console.log('    - App version: '.cyan + app.version);
            }
            if (app.type === 'image') {
                console.log('    - Docker Image: '.cyan + imageRepoName + ':' + app.version);
            }
            if (app.deployed_at) {
                console.log('    - Deployed at: '.cyan + new Date(app.deployed_at));
            }
            if (app.restarted_at) {
                console.log('    - Restarted at: '.cyan + new Date(app.restarted_at));
            }
            if(app.status) {
                console.log('    - Status: '.cyan + app.status);
            }
            if (app.server_errors && !app.pendingDeployment) {
                console.log('    - Server errors: '.cyan + app.server_errors);
                if (app.pendingBuild || app.pendingDeployment) {
                    console.log('      A new deployment is in progress, and server errors are from last failed deployment'.magenta);
                }
            }
            if (app.numServersDeployed) {
                console.log('    - Number of deployed servers: '.cyan + app.numServersDeployed);
            }
            console.log();
        }

        if (app.pendingDeployment) {
            console.log(' -- Pending deployment:'.cyan);
            if (app.pendingDeployment.NodeVersion) {
                console.log('    - Node version: '.cyan + app.pendingDeployment.NodeVersion);
            }
            if (app.pendingDeployment.server_size) {
                console.log('    - Server size: '.cyan + app.pendingDeployment.server_size);
            }
            if (app.pendingDeployment.version) {
                console.log('    - App version: '.cyan + app.pendingDeployment.version);
            }
            if (app.type === 'image') {
                console.log('    - Docker Image: '.cyan + imageRepoName + ':' + app.pendingDeployment.version);
            }
            if (app.pendingDeployment.deploy_started_at) {
                console.log('    - Deploy started at: '.cyan + new Date(app.pendingDeployment.deploy_started_at));
            }
            if(app.pendingDeployment.status) {
                console.log('    - Status: '.cyan + app.pendingDeployment.status);
            }
            if(app.pendingDeployment.statusHint) {
                console.log('              ' + app.pendingDeployment.statusHint.magenta);
            }
            if(app.pendingDeployment.retrying) {
                console.log('              ' + app.pendingDeployment.retrying.magenta);
            }
            if (app.pendingDeployment.server_errors) {
                console.log('    - Server errors: '.cyan + app.pendingDeployment.server_errors);
            }
            if (app.pendingDeployment.numServersDeployed) {
                console.log('    - Number of deployed servers: '.cyan + app.pendingDeployment.numServersDeployed);
            }
            console.log();
        }

        if(app.pendingBuild) {
            console.log(' -- Pending build:'.cyan);
            if (app.pendingBuild.NodeVersion) {
                console.log('    - Node version: '.cyan + app.pendingBuild.NodeVersion);
            }
            if (app.pendingBuild.version) {
                console.log('    - App version: '.cyan + app.pendingBuild.version);
            }
            if (app.build_start_time) {
                console.log('    - Build started at: '.cyan + new Date(app.build_start_time));
            }
            console.log('    > Build status: '.cyan + app.build_status);
            if (app.build_errors) {
                console.log('    - Build errors: '.cyan + app.build_errors.red);
            }
            console.log();
        }
    }
}

