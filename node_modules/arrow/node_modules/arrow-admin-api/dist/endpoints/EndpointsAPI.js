'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');
var Endpoints = require('./schema/Endpoints');
var GroupSummary = require('../api/schema/GroupSummary');

/**
 * API for interacting with the Endpoints.
 * @public
 */

var EndpointsAPI = function (_APIProvider) {
	_inherits(EndpointsAPI, _APIProvider);

	function EndpointsAPI() {
		_classCallCheck(this, EndpointsAPI);

		return _possibleConstructorReturn(this, (EndpointsAPI.__proto__ || Object.getPrototypeOf(EndpointsAPI)).apply(this, arguments));
	}

	_createClass(EndpointsAPI, null, [{
		key: 'bind',


		/**
   * Bind the paths to the controller methods.
   *
   * @param {EndpointsController} controller - The main controller providing the
   *                                         implementation for this API.
   */
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.schema('Endpoints', Endpoints.schema).schema('GroupSummary', GroupSummary.schema);

			swagger.post('/endpoints/generate').operationId('generateEndpoint').tag('endpoint').summary('Generate an endpoint.').parameter({
				in: 'body',
				name: 'endpoint',
				schema: {
					type: 'object',
					properties: {
						model: {
							type: 'string'
						},
						name: {
							type: 'string',
							description: 'The name for the endpoint.'
						},
						description: {
							type: 'string'
						}
					}
				},
				description: 'Information for endpoint generation.',
				required: true
			}).response(201, 'Endpoint was created.', null, null, {
				Location: {
					description: 'The URL to the newly created endpoint.',
					type: 'string'
				}
			}).response(404).response(500).action(function (req, res) {
				controller.generateEndpoints(req.body).then(function (result) {
					res.setHeader('Location', result);
					res.status(201).send();
					controller.ctx.arrow.emit('reload');
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});

			swagger.get('/endpoints/summary').operationId('getEndpointSummaries').tag('endpoint').summary('Gets an array of Endpoint summaries.').response(200, 'OK', 'GroupSummary').response(500).action(function (req, res) {
				var opts = {};

				controller.getEndpointSummaries(opts).then(function (summaries) {
					res.status(200).send(summaries);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 500);
				});
			});

			swagger.get('/endpoints/:group').operationId('getEndpoints').tag('endpoint').summary('Gets an array of Endpoints.').parameter({ in: 'path', name: 'group', type: 'string', description: 'API endpoint group to retrieve.' }).response(200, 'OK', 'Endpoints').response(404).response(500).action(function (req, res) {
				var name = void 0;

				if (req.params.group) {
					// decode group
					name = decodeURIComponent(req.params.group);
				}

				controller.getEndpoints(name).then(function (APIs) {
					res.status(200).send(APIs);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});
		}
	}]);

	return EndpointsAPI;
}(APIProvider);

exports = module.exports = EndpointsAPI;