'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');

/**
 * API for interacting with the Endpoints.
 * @public
 */

var FlowsAPI = function (_APIProvider) {
	_inherits(FlowsAPI, _APIProvider);

	function FlowsAPI() {
		_classCallCheck(this, FlowsAPI);

		return _possibleConstructorReturn(this, (FlowsAPI.__proto__ || Object.getPrototypeOf(FlowsAPI)).apply(this, arguments));
	}

	_createClass(FlowsAPI, null, [{
		key: 'bind',


		/**
   * Bind the paths to the controller methods.
   *
   * @param {EndpointsController} controller - The main controller providing the
  *                                         implementation for this API.
   */
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			swagger.get('/flows/:flowId').operationId('getFlow').tag('flow').summary('Gets a flow.').parameter({ in: 'path', name: 'flowId', type: 'string', description: 'The flow to retrieve.' })
			// .response(200, 'OK', 'Flow')
			.response(200, 'OK') // FIXME
			.response(404).response(500).action(function (req, res) {
				var flowId = void 0;

				if (req.params.flowId) {
					// decode group
					flowId = decodeURIComponent(req.params.flowId);
				}
				controller.getFlow(flowId).then(function (flow) {
					res.status(200).send(flow);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});
		}
	}]);

	return FlowsAPI;
}(APIProvider);

exports = module.exports = FlowsAPI;