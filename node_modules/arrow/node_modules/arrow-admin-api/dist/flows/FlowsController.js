'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint no-restricted-syntax:0 */
/* eslint no-unused-expressions:0 */
var BadRequestError = require('../errors/BadRequestError');
var NotFoundError = require('../errors/NotFoundError');

/**
 * The controller implementing the actions for interacting with Flows.
 * @public
 */

var FlowsController = function () {
	/**
  * Create a ProjectController.
  * @param {object} ctx - The context for this controller.
  * @param {express} ctx.app - The express application.
  * @param {string} ctx.prefix - The prefix bound to.
  * @param {Arrow} ctx.arrow - The Arrow server.
  * @param {boolean} ctx.devmode - Flag indicating if this is a devmode server.
  * @param {Swagger} ctx.swagger - openapi-doc instance.
  */
	function FlowsController(ctx) {
		_classCallCheck(this, FlowsController);

		this.ctx = ctx;
	}

	/**
  * Get API endpoints
  * @param {string} groupName - The name of the API endpoint group
  */


	_createClass(FlowsController, [{
		key: 'getFlow',
		value: function getFlow(flowId) {
			var _this = this;

			return new Promise(function (resolve, reject) {
				if (!flowId) {
					return reject(new BadRequestError());
				}
				var flow = _this.ctx.arrow.getFlow(flowId);
				if (!flow) {
					return reject(new NotFoundError());
				}
				return resolve(flow);
			});
		}
	}]);

	return FlowsController;
}();

exports = module.exports = FlowsController;